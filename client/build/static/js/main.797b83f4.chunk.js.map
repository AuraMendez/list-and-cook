{"version":3,"sources":["components/Course.js","components/DayMenu.js","components/Weekdays.js","components/RecipeCard.js","components/Recipes.js","components/ListEntry.js","components/List.js","components/Welcome.js","App.js","serviceWorker.js","index.js"],"names":["Course","props","className","data","id","name","DayMenu","getRecipeById","url","fetch","then","res","json","newCourse","setState","prevState","courses","catch","err","console","log","deleteCourse","state","Math","floor","random","document","querySelector","this","day","toLowerCase","addEventListener","e","preventDefault","formInput","value","type","placeholder","map","recipe","key","randomId","Component","Weekdays","days","RecipeCard","copy","navigator","clipboard","writeText","onClick","Recipes","getAllRecipes","allRecipes","recipes","getRecipesByTag","tag","getElementById","ListEntry","qty","unit","List","extractIngredients","Object","keys","ingredients","forEach","ingredient","getAllIds","allIds","querySelectorAll","element","push","getAttribute","tableDisplay","colSpan","Welcome","App","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.797b83f4.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Course(props) {\n    return (\n        <li className=\"course-li\" data={props.id}>\n            <i className=\"far fa-dot-circle\"/><p>{props.name}</p><i className=\"far fa-times-circle delete\"/>\n        </li>\n    )\n\n    \n}\n\nCourse.propTypes = {\n    name: PropTypes.string,\n    id: PropTypes.string\n};\n\nexport default Course;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Course from './Course';\n\n\n\nclass DayMenu extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      courses: [],\n    };\n  }\n\n  randomId() {\n    return `key${Math.floor(Math.random() * Math.floor(1000000))}`\n  }\n\n  getRecipeById = id => {\n    const url = `http://localhost:8000/api/recipes/id/${id}`;\n    fetch(url)\n      .then(res => res.json())\n      .then(newCourse => this.setState((prevState) => ({courses: [...prevState.courses, newCourse]}) ))\n      .catch(err => console.log(err));\n  }\n\n  deleteCourse = () => {\n    console.log('delete 1');\n  }\n\n  componentDidMount() {\n    document.querySelector(`#${this.props.day.toLowerCase()} .addCourseForm`).addEventListener('submit', e => {\n      e.preventDefault();\n      const formInput = document.querySelector(`#${this.props.day.toLowerCase()} input`);\n      this.getRecipeById(formInput.value);\n      formInput.value = '';\n    });\n    \n    // FOR FUTURE USE: Delete Button\n    // const deleteButtons = Array.from(document.querySelectorAll('.course-li i.delete'))\n    // if (deleteButtons) {\n    //   console.log('these are the buttons', deleteButtons);\n    //   deleteButtons.map(btn => btn.addEventListener('click', e => {\n    //   this.deleteCourse();\n    //   }))\n    // }\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"day-menu\" id={this.props.day.toLowerCase()}>\n        <h3>Menu for {this.props.day}</h3>\n        <form className=\"addCourseForm\">\n          <input type=\"text\" name=\"newCourse\" placeholder=\"Paste and enter\" /><button type=\"submit\"><i className=\"fas fa-plus\" /></button>\n        </form>\n        <ul className=\"courses-container\">\n          {this.state.courses?\n            this.state.courses.map(recipe => (<Course key={this.randomId()}name={recipe.name} id={recipe.id} />)) :\n            null}\n        </ul>\n      </div>\n    );\n  }\n\n}\n\nDayMenu.propTypes = {\n  day: PropTypes.string\n};\n\nexport default DayMenu;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport DayMenu from './DayMenu';\n// import uuid from 'react-uuid';\n// prop types!!! = default props\n\n\nclass Weekdays extends Component {\n    render() {\n        return (\n            <div>\n                {this.props.days.map(day => (<DayMenu key={day} day={day}/>))}\n            </div>\n        );\n    }\n}\n\nWeekdays.propTypes = {\n    days: PropTypes.array\n};\n\nexport default Weekdays;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass RecipeCard extends Component {\n    copy = () => {\n        const id = this.props.recipe.id;\n        navigator.clipboard.writeText(id).then(() => console.log(`The id ${id} is now in your clipboard`));\n    }\n\n    render() {\n        return (\n            <div className=\"recipe-card\">\n                <h3>{this.props.recipe.name}</h3>\n                <i onClick={this.copy} className=\"fas fa-copy\"></i>\n            </div>\n        );\n    }\n}\nRecipeCard.propTypes = {\n    recipe: PropTypes.object\n};\n\nexport default RecipeCard;","import React, { Component } from 'react';\nimport RecipeCard from './RecipeCard';\n// prop types!!! = default props\n\n\nclass Recipes extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            recipes: null,\n        };\n    }\n\n    getAllRecipes = () => {\n        fetch('http://localhost:8000/api/recipes/')\n            .then(res => res.json())\n            .then(allRecipes => this.setState({ recipes: allRecipes }))\n            .catch(err => console.log(err));\n    }\n\n    getRecipesByTag = (tag) => {\n        const url = `http://localhost:8000/api/recipes/tag/${tag}`\n        fetch(url)\n            .then(res => res.json())\n            .then(allRecipes => this.setState({ recipes: allRecipes }))\n            .catch(err => console.log(err));\n    }\n\n    componentDidMount() {\n        document.getElementById('showAll').addEventListener('click', () => {\n            this.getAllRecipes();\n        });\n        document.getElementById('searchByTag').addEventListener('submit', e => {\n            e.preventDefault();\n            const tag = document.getElementById('tagInput').value;\n            this.getRecipesByTag(tag);\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <form id=\"searchByTag\">\n                    <label>#\n                    <input type=\"text\" id=\"tagInput\" name=\"tag\" placeholder=\"(i.e. soup, vegetarian...)\" />\n                    </label>\n                    <button type=\"submit\">Search</button>\n                </form>\n                <button id=\"showAll\">Show all recipes</button>\n                <div className=\"recipes-container\">\n                    {this.state.recipes ?\n                        this.state.recipes.map(recipe => (<RecipeCard key={recipe.id} recipe={recipe} />)) :\n                        null}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Recipes;","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nfunction ListEntry(props) {\n    return (\n        <tr>\n            <td>{props.name}</td>\n            <td>{props.qty}</td>\n            <td>{props.unit}</td>\n        </tr>\n    )\n}\n\nListEntry.propTypes = {\n    name:PropTypes.string,\n    unit:PropTypes.string,\n    qty: PropTypes.number,\n  };\n\nexport default ListEntry;","import React, { Component } from 'react';\n\nimport ListEntry from './ListEntry';\n\n\nclass List extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ingredients: [],\n            tableDisplay: false\n        };\n    }\n\n    randomId() {\n        return `le${Math.floor(Math.random() * Math.floor(1000000))}`\n    }\n\n    extractIngredients = (recipe) => {\n        const keys = Object.keys(recipe.ingredients);\n        keys.map(key => recipe.ingredients[key].forEach(ingredient => (\n            this.setState(prevState => ({ ingredients: [...prevState.ingredients, ingredient] }))\n        )));\n    }\n\n    getRecipeById = (id) => {\n        const url = `http://localhost:8000/api/recipes/id/${id}`;\n        fetch(url)\n            .then(res => res.json())\n            .then(recipe => this.extractIngredients(recipe))\n            .catch(err => console.log(err));\n    }\n\n    getAllIds = () => {\n        const allIds = [];\n        document.querySelectorAll('.course-li').forEach(element => allIds.push(element.getAttribute('data')))\n        allIds.forEach(id => this.getRecipeById(id));\n    }\n\n    componentDidMount() {\n        document.querySelector('#generateList').addEventListener('click', () => {\n            this.setState({ tableDisplay: true });\n            // document.querySelector('.table-ingredients').style.display = \"block\";\n            this.getAllIds();\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <button id=\"generateList\">Generate List</button>\n                {this.state.tableDisplay ?\n                    <table className=\"table-ingredients\">\n                        <thead>\n                            <tr>\n                                <th colSpan=\"3\">Your shopping list</th>\n                            </tr>\n                            <tr>\n                                <td>Ingredients</td>\n                                <td>Quantity</td>\n                                <td>Units</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.ingredients\n                                ? this.state.ingredients.map(ingredient =>\n                                    <ListEntry\n                                        key={this.randomId()}\n                                        name={ingredient.name}\n                                        unit={ingredient.unit}\n                                        qty={ingredient.qty}\n                                    />)\n                                : null}\n                        </tbody>\n                    </table> : null}\n            </div>\n\n        )\n    }\n}\n\nexport default List;","import React from 'react';\n\nfunction Welcome () {\n    return (\n        <div>\n            <h1>Welcome to <strong>List&Cook</strong>!</h1>\n            <p>This app will hopefully make your life a tiny bit easier.</p>\n            <div className=\"instructions\">\n                <p><strong>Here are the instructions:</strong></p>\n                <ol>\n                    <li>Browse through the recipes. You can see them all at once, or filter using common tags (such as 'vegetarian', 'vegan', 'soup', 'salad', etc.).</li>\n                    <li>Select the recipes you like and add them on the day of the week where you'd like to cook it. You can do this by clicking on the 'copy' icon to the right of each recipe (this will copy that recipe's unique id to your clipboard), pasting it on the day of your choice and press 'enter' or the plus button</li>\n                    <li>Once you have selected your menu for the whoile week, got to the tab 'Generate shopping list' and click on the button. Your shopping list should appear on the screen!</li>\n                </ol>\n            </div>\n            \n        </div>\n      \n    )\n  }\n  \n  export default Welcome;","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom';\nimport Weekdays from './components/Weekdays';\nimport Recipes from './components/Recipes';\nimport List from './components/List';\nimport Welcome from './components/Welcome';\n\n\n\n\nconst days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nclass App extends Component {\n    render() {\n        return (\n            <BrowserRouter>\n                <div className=\"App\">\n                    <header className=\"App-header\">\n                        <h1>List&Cook</h1>\n                        <p>easy decisions - easy groceries</p>\n                        <nav></nav>\n                    </header>\n                    <main className=\"App-main\">\n                        <aside className=\"weekdays\">\n                            <h2>Weekdays</h2>\n                            <Weekdays days={days} />\n                        </aside>\n                        <section className=\"main-content\">\n                            <nav>\n                                <ul>\n                                    <li><Link className=\"nav-link\" to=\"/\">Welcome</Link></li>\n                                    <li><Link to=\"/recipes\" className=\"nav-link\">Browse recipes</Link></li>\n                                    <li><Link to=\"/list\" className=\"nav-link\">My shopping list</Link></li>\n                                </ul>\n                            </nav>\n                            <Switch>\n                                <Route path=\"/recipes\"><Recipes /></Route>\n                                <Route path=\"/list\"><List /></Route>\n                                <Route path=\"/\"><Welcome /></Route>\n                            </Switch>\n                        </section>\n                    </main>\n                </div>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}